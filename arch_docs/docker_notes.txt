docker notes:

NETWORKS:
source:
https://docs.docker.com/engine/reference/commandline/network_create/

list active containers
$ docker ps

list networks
$ docker network ls

remove networks
$ docker network rm test001

create a network
$ docker network create --driver=bridge --subnet=192.168.0.0/16 maritime_app


IMAGES:
source https://docs.docker.com/engine/reference/commandline/image/

To list images
docker image ls


RabbitMQ docker

$ docker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3-management
$ docker run -d --hostname some-rabbit --name some-rabbit --network some-network -e RABBITMQ_ERLANG_COOKIE='secret cookie here' rabbitmq:3


To pull the image:
docker pull rabbitmq
docker pull rabbitmq:3.8.3-alpine
docker pull rabbitmq:3.8.3-management-alpine

docker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3-management --network maritime_app --ip 192.168.0.16

docker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3.8.3-management-alpine --network maritime_app 



docker run -d --hostname my-rabbit --name container_rabbit --network maritime_app --ip 192.168.0.16 -p 8080:15672 rabbitmq:3.8.3-management-alpine

docker run -d --hostname my-rabbit --name container_rabbit --ip 192.168.0.16 -p 8080:15672 rabbitmq:3.8.3-management-alpine

#############################
To create the container rabbitmq (only one time)
docker run -d --hostname my-rabbit --name container_rabbit --ip 192.168.0.16 -p 15672:15672 -p 5672:5672 --mount source=vol_rabbitmq,target=/var/lib/rabbitmq  rabbitmq:3.8.3-management-alpine

docker run -d --hostname my-rabbit --name container_rabbit --network maritime_app --ip 192.168.0.16 -p 15672:15672 -p 5672:5672 --mount source=vol_rabbitmq,target=/var/lib/rabbitmq  rabbitmq:3.8.3-management-alpine

docker run -d --hostname my-rabbit --name container_rabbit --network maritime_app --ip 192.168.0.16 --publish 15672:15672 --publish 5672:5672 --mount source=vol_rabbitmq,target=/var/lib/rabbitmq  rabbitmq:3.8.3-management-alpine


docker run -d --hostname my-rabbit --name container_rabbit --publish 15672:15672 --publish 5672:5672 --mount source=vol_rabbitmq,target=/var/lib/rabbitmq  rabbitmq:3.8.3-management-alpine

#############################


#############################
To relaunch the container rabbitmq, once it has been created and stopped
docker start container_rabbit
#############################

#############################
To stop the container rabbitmq and remove it
docker stop container_rabbit
docker container rm container_rabbit
docker ps -a
#############################


create volume
docker volume create vol_rabbitmq
docker volume create vol_elastic_master
docker volume create vol_elastic_node1
docker volume create vol_elastic_node2


#############################
create a docker image from a dockerfile


docker build /mnt/disk2/experiments/maritime_tracking/docker_images/app_tracking_v02 -t app_tracking:1.0.23

docker run -ti --hostname polling_quakes --name container_polling_quakes -e "POLLING_SCRIPT=/maritime_tracking/src/polling_proxy/polling_proxy.py" -e "POLLING_SOURCE=/maritime_tracking/src/polling_proxy/configuration/usgs_quakes_all_hour.json" -e "POLLING_PERIODICITY=2" app_tracking:1.0.23

docker run -ti --hostname polling_quakes --name container_polling_quakes -e "POLLING_SCRIPT=/maritime_tracking/src/polling_proxy/polling_proxy.py" -e "POLLING_SOURCE=/maritime_tracking/src/configuration/usgs_quakes_all_hour.json" -e "POLLING_PERIODICITY=1" -e "RABBIT_HOST=172.17.0.2" app_tracking:1.0.23





#############################


python data_process.py ../configuration/data_processor.json 172.17.0.2
#############################


docker run -d --name elastic-master --mount source=vol_elastic_master,target=/usr/share/elasticsearch/data blacktop/elasticsearch:latest
docker run -d --name elastic-client -p 9200:9200 --link elastic-master --mount source=vol_elastic_client,target=/usr/share/elasticsearch/data blacktop/elasticsearch:latest
docker run -d --name elastic-data-1 --link elastic-master --mount source=vol_elastic_node1,target=/usr/share/elasticsearch/data blacktop/elasticsearch:latest
docker run -d --name elastic-data-2 --link elastic-master --mount source=vol_elastic_node2,target=/usr/share/elasticsearch/data blacktop/elasticsearch:latest
docker run -d --name kibana -p 5601:5601 --link elastic-client --mount source=vol_elastic_node2,target=/usr/share/elasticsearch/data blacktop/elasticsearch:latest

docker stop elastic-master
docker stop elastic-client
docker stop elastic-data-1
docker stop elastic-data-2
docker stop kibana
docker rm elastic-master
docker rm elastic-client
docker rm elastic-data-1
docker rm elastic-data-2
docker rm kibana

$ docker run -d --name kibana -p 5601:5601 --link elastic-client:elasticsearch:4.6 kibana

$ docker run -d --name elastic-data-1 --link elastic-master blacktop/elasticsearch:2.4 data


$ docker run -d --name elastic-client -p 9200:9200 --link elastic-master blacktop/elasticsearch:kopf client





#############################
Generate the certificates (only needed once):
docker-compose -f create-certs.yml run --rm create_certs


docker-compose up -d


docker run --rm -v es_certs:/certs --network=es_default docker.elastic.co/elasticsearch/elasticsearch:7.7.0 curl --cacert /certs/ca/ca.crt -u elastic:foucalT0 https://es01:9200

#############################




docker pull docker.elastic.co/elasticsearch/elasticsearch:7.7.0
docker run -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" --name elastic_single_node --mount source=es_single_node,target=/usr/share/elasticsearch/data docker.elastic.co/elasticsearch/elasticsearch:7.7.0

docker pull docker.elastic.co/kibana/kibana:7.7.0
docker run --link elastic_single_node:elasticsearch -p 5601:5601 {docker-repo}:{version}

docker run --link elastic_single_node:elasticsearch -p 5601:5601 docker.elastic.co/kibana/kibana:7.7.0



https://markheath.net/post/exploring-elasticsearch-with-docker


